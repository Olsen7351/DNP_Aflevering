@page "/posts"
@using global::Shared
@using Frontend_Blazor.Services
@using global::Shared.Dto
@using Microsoft.AspNetCore.Authorization
@inject IPostService PostService
@attribute [Authorize]

<PageTitle>Counter</PageTitle>

<h1>Create Post</h1>
<p role="status">Number of posts: @CountOfPost</p>

<!-- Form for creating a new post -->
<form @onsubmit="CreatePost">
    <div class="form-group">
        <label for="title">Title:</label>
        <input type="text" class="form-control" id="title" @bind="postDto.Header"/>
    </div>
    <div class="form-group">
        <label for="content">Content:</label>
        <textarea class="form-control" id="content" @bind="postDto.Body"></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Create Post</button>
</form>
<!-- Bootstrap-styled list for displaying posts -->
<ul class="list-group">
    @foreach (var post in posts)
    {
        <li class="list-group-item">
            <h4>@post.Header</h4>
            <small class="text-muted">Created at: @post.CreatedAt</small>
            <button class="btn btn-danger" @onclick="() => DeletePost(post)">Delete</button>
             <a class="btn btn-dark" href="/posts/@post.Id">View Post</a>
        </li>
    }
</ul>


@code {
    private int CountOfPost = 0;
    private List<Post> posts = new List<Post>();
    private PostDto postDto = new PostDto(); // Create a new PostDto object to hold input data

    protected override async Task OnInitializedAsync()
    {
        var response = await PostService.GetPosts();
        var enumerable = response.ToList();
        CountOfPost = enumerable.Count();
        posts = enumerable.ToList();
    }

    // Create post method
    // Create post method
    private async Task CreatePost()
    {
        var post = new PostDto
        {
            Header = postDto.Header,
            Body = postDto.Body,
            CreatedAt = DateTime.Now,
        };

        await PostService.CreatePost(post);
        postDto = new PostDto(); // Reset the input fields
        await RefreshList(); // Update the list of posts
    }
    private async Task DeletePost(Post post)
    {
        int id = post.Id;
        await PostService.DeletePost(id);
        await RefreshList();
    }


    private async Task RefreshList()
    {
        var response = await PostService.GetPosts();
        var enumerable = response.ToList();
        CountOfPost = enumerable.Count();
        posts = enumerable.ToList();
    }

}